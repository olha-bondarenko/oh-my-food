{"ast":null,"code":"import _asyncToGenerator from \"/Users/olgabondarenko/Desktop/code/oh-my-food/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/order.service\";\nimport * as i2 from \"src/app/services/cart.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-toastr\";\nconst _c0 = [\"paypal\"];\nexport class PaypalButtonComponent {\n  constructor(orderService, cartService, router, toasterService) {\n    this.orderService = orderService;\n    this.cartService = cartService;\n    this.router = router;\n    this.toasterService = toasterService;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    const self = this;\n    paypal.Buttons({\n      createOrder: (data, actions) => {\n        return actions.order.create({\n          purchase_units: [{\n            amount: {\n              currency_code: 'EUR',\n              value: self.order.totalPrice\n            }\n          }]\n        });\n      },\n      onApprove: function () {\n        var _ref = _asyncToGenerator(function* (data, actions) {\n          const payment = yield actions.order.capture();\n          _this.order.paymentId = payment.id;\n          self.orderService.pay(_this.order).subscribe({\n            next: orderId => {\n              _this.cartService.clearCart();\n\n              _this.router.navigateByUrl('/track/' + orderId);\n\n              _this.toasterService.success('Payment Completed Successfully', 'Success');\n            },\n            error: error => {\n              _this.toasterService.error('Payment Failed', 'Error');\n            }\n          });\n        });\n\n        return function onApprove(_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      onError: err => {\n        this.toasterService.error('Payment Failed', 'Error');\n        console.log(err);\n      }\n    }).render(this.paypalElement.nativeElement);\n  }\n\n}\n\nPaypalButtonComponent.ɵfac = function PaypalButtonComponent_Factory(t) {\n  return new (t || PaypalButtonComponent)(i0.ɵɵdirectiveInject(i1.OrderService), i0.ɵɵdirectiveInject(i2.CartService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.ToastrService));\n};\n\nPaypalButtonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PaypalButtonComponent,\n  selectors: [[\"app-paypal-button\"]],\n  viewQuery: function PaypalButtonComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paypalElement = _t.first);\n    }\n  },\n  inputs: {\n    order: \"order\"\n  },\n  decls: 2,\n  vars: 0,\n  consts: [[\"paypal\", \"\"]],\n  template: function PaypalButtonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYXlwYWwtYnV0dG9uLmNvbXBvbmVudC5zY3NzIn0= */\"]\n});","map":{"version":3,"mappings":";;;;;;;AAcA,OAAM,MAAOA,qBAAP,CAA4B;EAKhCC,YAAqBC,YAArB,EACUC,WADV,EAEUC,MAFV,EAGUC,cAHV,EAGuC;IAHlB;IACX;IACA;IACA;EAAkC;;EAE5CC,QAAQ;IAAA;;IACN,MAAMC,IAAI,GAAG,IAAb;IACAC,MAAM,CAACC,OAAP,CAAe;MACbC,WAAW,EAAE,CAACC,IAAD,EAAYC,OAAZ,KAA2B;QACtC,OAAOA,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAqB;UAC1BC,cAAc,EAAE,CACd;YACEC,MAAM,EAAE;cACNC,aAAa,EAAE,KADT;cAENC,KAAK,EAAEX,IAAI,CAACM,KAAL,CAAWM;YAFZ;UADV,CADc;QADU,CAArB,CAAP;MAUD,CAZY;MAabC,SAAS;QAAA,6BAAE,WAAOT,IAAP,EAAiBC,OAAjB,EAAiC;UAC1C,MAAMS,OAAO,SAAST,OAAO,CAACC,KAAR,CAAcS,OAAd,EAAtB;UACA,KAAI,CAACT,KAAL,CAAWU,SAAX,GAAuBF,OAAO,CAACG,EAA/B;UACAjB,IAAI,CAACL,YAAL,CAAkBuB,GAAlB,CAAsB,KAAI,CAACZ,KAA3B,EAAkCa,SAAlC,CAA4C;YAC1CC,IAAI,EAAGC,OAAD,IAAY;cAChB,KAAI,CAACzB,WAAL,CAAiB0B,SAAjB;;cACA,KAAI,CAACzB,MAAL,CAAY0B,aAAZ,CAA0B,YAAYF,OAAtC;;cACA,KAAI,CAACvB,cAAL,CAAoB0B,OAApB,CAA4B,gCAA5B,EAA8D,SAA9D;YACD,CALyC;YAM1CC,KAAK,EAAGA,KAAD,IAAU;cACf,KAAI,CAAC3B,cAAL,CAAoB2B,KAApB,CAA0B,gBAA1B,EAA4C,OAA5C;YACD;UARyC,CAA5C;QAUD,CAbQ;;QAAA;UAAA;QAAA;MAAA,GAbI;MA4BbC,OAAO,EAAGC,GAAD,IAAa;QACpB,KAAK7B,cAAL,CAAoB2B,KAApB,CAA0B,gBAA1B,EAA4C,OAA5C;QACAG,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACD;IA/BY,CAAf,EAiCCG,MAjCD,CAiCQ,KAAKC,aAAL,CAAmBC,aAjC3B;EAkCD;;AA9C+B;;;mBAArBvC,uBAAqBwC;AAAA;;;QAArBxC;EAAqByC;EAAAC;IAAA;;;;;;;;;;;;;;;;;;MCdlCF","names":["PaypalButtonComponent","constructor","orderService","cartService","router","toasterService","ngOnInit","self","paypal","Buttons","createOrder","data","actions","order","create","purchase_units","amount","currency_code","value","totalPrice","onApprove","payment","capture","paymentId","id","pay","subscribe","next","orderId","clearCart","navigateByUrl","success","error","onError","err","console","log","render","paypalElement","nativeElement","i0","selectors","viewQuery"],"sourceRoot":"","sources":["/Users/olgabondarenko/Desktop/code/oh-my-food/src/app/components/paypal-button/paypal-button.component.ts","/Users/olgabondarenko/Desktop/code/oh-my-food/src/app/components/paypal-button/paypal-button.component.html"],"sourcesContent":["import { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { CartService } from 'src/app/services/cart.service';\nimport { OrderService } from 'src/app/services/order.service';\nimport { Order } from 'src/app/shared/models/order';\n\ndeclare let paypal: any;\n\n@Component({\n  selector: 'app-paypal-button',\n  templateUrl: './paypal-button.component.html',\n  styleUrls: ['./paypal-button.component.scss']\n})\nexport class PaypalButtonComponent implements OnInit {\n\n  @Input() order!: Order;\n  @ViewChild('paypal', {static: true}) paypalElement!: ElementRef;\n\n  constructor( private orderService: OrderService,\n    private cartService: CartService,\n    private router: Router,\n    private toasterService: ToastrService) { }\n\n  ngOnInit(): void {\n    const self = this;\n    paypal.Buttons({\n      createOrder: (data: any, actions:any) => {\n        return actions.order.create({\n          purchase_units: [\n            {\n              amount: {\n                currency_code: 'EUR',\n                value: self.order.totalPrice\n              }\n            }\n          ]\n        })\n      },\n      onApprove: async (data:any, actions: any) => {\n        const payment = await actions.order.capture();\n        this.order.paymentId = payment.id;\n        self.orderService.pay(this.order).subscribe({\n          next: (orderId) => {\n            this.cartService.clearCart();\n            this.router.navigateByUrl('/track/' + orderId);\n            this.toasterService.success('Payment Completed Successfully', 'Success');\n          },\n          error: (error) => {\n            this.toasterService.error('Payment Failed', 'Error')\n          }\n        })\n      },\n\n      onError: (err: any) => {\n        this.toasterService.error('Payment Failed', 'Error');\n        console.log(err);\n      }\n    })\n    .render(this.paypalElement.nativeElement);\n  }\n\n}\n","<div #paypal></div>"]},"metadata":{},"sourceType":"module"}